<template>
	<div>
		<!--搜索工具条-->
		<el-col :span="24" class="toolbar">
			<el-form :inline="true" :model="filters">
				<el-form-item>
					<el-input v-model="filters.groupCode" placeholder="集团编号"></el-input>
				</el-form-item>
				<el-form-item>
					<el-input v-model="filters.groupName" placeholder="集团名称"></el-input>
				</el-form-item>
				<el-form-item>
					<el-select v-model="filters.useStatus" multiple collapse-tags placeholder="请选择">
			           <el-option v-for="item in useStatusOptions" :key="item.index" :label="item.value":value="item.key"></el-option>
					 </el-select>
  				</el-form-item>
				<el-form-item>
					<el-button type="primary" v-on:click="getBaseInfo">查询</el-button>
				</el-form-item>
				<el-form-item>
					<el-button type="primary" @click="handleAdd">新增</el-button>
				</el-form-item>
			</el-form>
		</el-col>
		<!--列表-->
		<div style="margin-top: 20px;margin-bottom:20px;">
			<el-button @click="toggleSelection()">分配权限</el-button>
			<el-button @click="toggleSelection()">取消选择</el-button>
  		</div>
		<el-table  ref="multipleTable" :data="baseinfo" highlight-current-row v-loading="listLoading" @selection-change="selsChange" style="width: 100%;" @sort-change="sortChange">
			<el-table-column type="selection" width="55">
			</el-table-column>
				<el-table-column label="操作" width="280">
				<template slot-scope="scope">
					<el-button size="samll" type="success" @click="handleQuanxian(scope.$index, scope.row)">分配权限</el-button>
					<el-button size="small" @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
					<el-button type="danger" size="small" @click="handleDel(scope.$index, scope.row)">删除</el-button>
				</template>
			</el-table-column>
			<el-table-column prop="groupCode" label="集团编号" width="120" sortable="custom">
			</el-table-column>
			<el-table-column prop="groupName" label="集团名称" min-width="180" sortable="custom">
			</el-table-column>
			<el-table-column prop="companyCount" label="允许创建公司数" width="80" sortable="custom">
			</el-table-column>
			<el-table-column prop="createTime" label="创建日期 " width="180"  sortable="custom">
			</el-table-column>
			<el-table-column prop="expireTime" label="到期日期" width="180" sortable="custom">
			</el-table-column>
			<el-table-column prop="useStatus" label="状态" min-width="100" :formatter="formatStatus" sortable="custom">
			</el-table-column>
<<<<<<< .mine
=======
			<el-table-column label="操作" width="150">
				<template slot-scope="scope">
				<!-- <el-button size="small" @click="source(scope.$index, scope.row)"></el-button> -->
					<el-button size="small" @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
					<el-button type="danger" size="small" @click="handleDel(scope.$index, scope.row)">删除</el-button>
				</template>
			</el-table-column>
>>>>>>> .r150
		</el-table>

		<!--分页工具条-->
		<el-col :span="24" class="toolbar">
			<el-pagination  @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="pager.currentPage" :page-sizes="pagerSizes"  :page-size="pager.pageSize" layout="total, sizes, prev, pager, next, jumper" :total="total" style="float:right;" >
			</el-pagination>
		</el-col>

		<!--编辑界面-->
		<el-dialog title="编辑" :visible.sync="editFormVisible" :close-on-click-modal="false">
			<el-form :model="editForm" label-width="120px" :rules="addFormRules" ref="editForm">
				<el-form-item label="集团编号" >
					<el-input v-model="editForm.groupCode" ></el-input>
				</el-form-item>
				<el-form-item label="集团名称" >
					<el-input v-model="editForm.groupName" ></el-input>
				</el-form-item>
			<el-form-item label="允许创建公司数" prop="companyCount">
					<el-input-number v-model="editForm.companyCount" auto-complete="off"></el-input-number>
				</el-form-item>
				<el-form-item label="到期时间 ">
					<el-date-picker type="datetime" placeholder="到期时间 " v-model="editForm.expireTime" value-format="yyyy-MM-dd HH:mm:ss"> </el-date-picker>
				</el-form-item>
			</el-form>
			<div slot="footer" class="dialog-footer">
				<el-button @click.native="editFormVisible = false">取消</el-button>
				<el-button type="primary" @click.native="editSubmit" :loading="editLoading">提交</el-button>
			</div>
		</el-dialog>

		<!--新增界面-->
		<el-dialog title="新增" :visible.sync="addFormVisible" :close-on-click-modal="false">
			<el-form :model="addForm" label-width="120px" :rules="addFormRules" ref="addForm">
				<el-form-item label="集团编号" prop="groupCode">
					<el-input v-model="addForm.groupCode" auto-complete="off"></el-input>
				</el-form-item>
				<el-form-item label="集团名称" prop="groupName">
					<el-input v-model="addForm.groupName" auto-complete="off"></el-input>
				</el-form-item>
				<el-form-item label="允许创建公司数" prop="companyCount">
					<el-input-number v-model="addForm.companyCount" auto-complete="off"></el-input-number>
				</el-form-item>
				<el-form-item label="到期时间 ">
					<el-date-picker type="datetime" placeholder="到期时间 " v-model="addForm.expireTime" value-format="yyyy-MM-dd HH:mm:ss"></el-date-picker>
				</el-form-item>
			</el-form>
			<div slot="footer" class="dialog-footer">
				<el-button @click.native="addFormVisible = false">取消</el-button>
				<el-button type="primary" @click.native="addSubmit" :loading="addLoading">提交</el-button>
			</div>
		</el-dialog>
<<<<<<< .mine
		<!--分配权限-->
		<el-dialog title="分配权限" :visible.sync="treeVisible" :close-on-click-modal="false">
			<el-tree
			  :props="props"
			  :load="loadNode"
			  lazy
			  show-checkbox
			  @check-change="handleCheckChange">
			</el-tree>
		</el-dialog>

=======
<el-dialog title="编辑权限" :visible.sync="addEditVisible" :close-on-click-modal="false">	
<el-tree :data="data2"  show-checkbox node-key="id" :default-checked-keys="defaultTree"  ref="tree" highlight-current> </el-tree>
<div class="buttons">
  <el-button style="float:right" @click="getCheckedNodes">提交</el-button>
</div>
</el-dialog>
>>>>>>> .r150
	</div>
</template>
<script>
	import {pager,pagerSizes} from '@/base/baseParam'
	export default {
		data() {
			return {
				//树
				 props: {
			          label: 'name',
			          children: 'zones'
			        },
			      count: 1,
				//搜索
				filters:
				{
					groupCode: '',
					groupName:'',
					useStatus:[],
				},
				defaultTree:[],
				data2:[],
				multipleSelection: [],
				useStatusOptions:[],
				baseinfo: [],
				total: 0,
				pager:pager,
				pagerSizes:pagerSizes,
				listLoading: false,
				sels: [],//列表选中列
				addEditVisible:false,//树形控件
				addEditLoading:false,
				editFormVisible: false,//编辑界面是否显示

				editLoading: false,
				//编辑界面数据
				editForm: {
					id: 0,
					companyCount: 0,
					expireTime:'',
					groupCode:'',
					groupName: ''
				},
				treeVisible:false,
				addFormVisible: false,//新增界面是否显示
				addLoading: false,
				//新增-编辑界面验证
				addFormRules: {
					groupCode: [
						{ required: true, message: '请输入集团编号', trigger: 'blur' }
					],
					groupName: [
						{ required: true, message: '请输入集团名称', trigger: 'blur' }
					],
					companyCount: [
						{ required: true, message: '请输入允许创建公司数', trigger: 'blur' }
					],
					expireTime: [
						{ required: true, message: '请输入到期时间', trigger: 'blur' }
					]
				},
				//新增界面数据
				addForm: {
					companyCount: 0,
					expireTime:'',
					groupCode:'',
					groupName: ''
				}

			}
		},
		methods: {
			//状态显示转换
			formatStatus: function (row, column) {
			for(var i = 0 ;i < this.useStatusOptions.length;i++){
					if(this.useStatusOptions[i].key == row.useStatus){
						return this.useStatusOptions[i].value;
					}
				}
			},
			
			handleSizeChange(val) {
				this.pager.pageSize = val;
				this.getBaseInfo();
			},
			handleCurrentChange(val) {
				this.pager.currentPage = val;
				this.getBaseInfo();
			},
			//表格排序
			sortChange(val){
					val.order == 'ascending' ? val.order='asc':val.order='desc';
					this.pager.sortType=val.order;
					this.pager.sortName=val.prop;
					this.getBaseInfo();
				},
			//获取基础信息列表
			getBaseInfo() {
				let para = {
					pager: this.pager,
					groupCode: this.filters.groupCode,
					groupName: this.filters.groupName,
					useStatusEnum:this.filters.useStatus
				};
				this.listLoading = true;
					this.$axios({
					    method: 'post',
					    url:'/group/baseinfo/page',
					    data:para,
					}).then((res)=>{
						this.total = res.totalRows;
						this.baseinfo = res.rows;
						this.listLoading = false;
					});
			},
			//选中
			  toggleSelection(rows) {
				
				this.addEditVisible = true;
					this.$axios({
					    method: 'post',
					    url:'system/basicresource/group/list/'+this.sels[0].id,
					}).then((res)=>{
						this.defaultTree = [];
						for (let index = 0; index < res.length; index++) {
							 res[index].label = res[index].name;
							if(res[index].flag > 0 ){
								this.defaultTree.push(res[index].id)
							}
						};
						alert(JSON.stringify(res))
						 this.data2 = res;
						 this.addEditLoading = false;
					});
				
			},
			//   树形控件提交
			getCheckedNodes() {
					this.$axios({
					    method: 'put',
					    url:'system/basicresource/group/update/'+this.sels[0].id,
						data:this.$refs.tree.getCheckedKeys()
					}).then((res)=>{
						console.log(res)
						if(res.code == 200){
							this.$message({
										message: '更新成功',
										type: 'success'
										});
						}else{
							this.$message({
										message: '更新失败',
										type: 'fail'
										});
						}
						this.addEditVisible = false;
					});
			},
			//获取状态
			getUseStatus(){
					this.$axios({
					    method: 'get',
					    url:'/group/baseinfo/usestatus',
					}).then((res)=>{
						this.useStatus = res;
						this.listLoading = false;
					});
			},
			
			//删除
			handleDel (index, row) {
				this.$confirm('确认删除该记录吗?', '提示', {
					type: 'warning'
				}).then(() => {
					this.listLoading = true;
						this.$axios({
								    method: 'DELETE',
								    url:'/group/baseinfo/delete/'+row.id,
								}).then((res)=>{
										this.$message({
										message: '删除成功',
										type: 'success'
										});
									this.getBaseInfo();
								})
							}).catch(() => {
							});
			},
			//分配权限
			source(index,row){
				this.$axios({
						    method: 'post',
						    url:'/system/basicresource/group/list/{groupId}'+row.id,
						}).then((res)=>{
							this.editForm = Object.assign({},res);
				});
			},
			//显示编辑界面
			handleEdit (index, row) {
				this.editFormVisible = true;
				this.$axios({
						    method: 'post',
						    url:'/group/baseinfo/get/'+row.id,
						}).then((res)=>{
							this.editForm = Object.assign({},res);
				});
			},
			//显示新增界面
			handleAdd() {
				this.addFormVisible = true;
				this.addForm = {
				  companyCount: 1,
					expireTime:'',
					groupCode:'',
					groupName: ''
				};
			},
			//显示分配权限
			handleQuanxian(index, row){
				this.treeVisible = true;
			},
			//编辑
			editSubmit() {
				this.$refs.editForm.validate((valid) => {
					if (valid) {
						this.$confirm('确认提交吗？', '提示', {}).then(() => {
							this.editLoading = true;
							console.log(this.editForm)
							let para = Object.assign({}, this.editForm);
							let id=para.id;
							this.$axios({
							    method: 'PUT',
							    url:'/group/baseinfo/update/'+id,
							    data:para,
							}).then((res)=>{
							this.baseinfo = res.rows;
							this.listLoading = false;
							this.$message({
									message: '提交成功',
									type: 'success'
								});
								this.$refs['editForm'].resetFields();
								this.editFormVisible = false;
								this.getBaseInfo();
							});
						});
					}
				});
			},
			//新增
			addSubmit () {
				this.$refs.addForm.validate((valid) => {
					if (valid) {
						this.$confirm('确认提交吗？', '提示', {}).then(() => {
							this.addLoading = true;
							let para = Object.assign({}, this.addForm);
								this.$axios({
							    method: 'PUT',
							    url:'/group/baseinfo/add',
							    data:para,
								}).then((res)=>{
								this.baseinfo = res.rows;
								this.listLoading = false;
								this.$message({
										message: '提交成功',
										type: 'success'
								});
									this.$refs['addForm'].resetFields();
									this.addFormVisible = false;
									this.getBaseInfo();
							});
						});
					}
				});
			},
			selsChange (sels) {
				this.sels = sels;
			}, 
			//加载权限
			handleCheckChange(data, checked, indeterminate) {
		        console.log("handleCheckChange"+data, checked, indeterminate);
		      },
     		 handleNodeClick(data) {
	        console.log("handleNodeClick"+data);
	      },
	      loadNode(node, resolve) {
	      	var data=[];
		        if (node.level === 0) {
		          		this.$axios({
							    method: 'post',
							    url:'/system/basicresource/list',
							    data:{"levelEnum":["first"]},
								}).then((res)=>{
									for (var i=0;i<res.length;i++){
										 data[i]={name:res[i].resourceName};
									}
										return resolve(data);
							});
							return resolve([]);
		        }
		        
		        if (node.level > 3) return resolve([]);
		        var hasChild;
		        if (node.data.name === 'region1') {
		          hasChild = true;
		        } else if (node.data.name === 'region2') {
		          hasChild = false;
		        } else {
		          hasChild = Math.random() > 0.5;
		        }
		        setTimeout(() => {
		          var data;
		          if (hasChild) {
		            data = [{
		              name: 'zone' + this.count++
		            }, {
		              name: 'zone' + this.count++
		            }];
		          } else {
		            data = [];
		          }
		
		          resolve(data);
		        }, 500);
			}
		},
		mounted() {
			this.getBaseInfo();
			this.getUseStatus();
		}
	}

</script>

<style >
</style>